#!/usr/bin/env python3
# This file is placed in the Public Domain.


"console"


import getpass
import os
import readline
import sys
import termios


sys.path.insert(0, os.getcwd())


from otp.command import Event, command, parse
from otp.modules import face
from otp.object  import Config
from otp.runtime import Client, errors, forever, later, launch


if os.path.exists('mods'):
    from mods import face as MODS
else:
    MODS = None


cfg = Config()


class Console(Client):

    "Console"

    def __init__(self):
        Client.__init__(self)
        self.register("command", command)

    def callback(self, evt):
        "wait for result."
        Client.callback(self, evt)
        evt.wait()

    def poll(self):
        "poll console and create event."
        evt = Event()
        evt.orig = repr(self)
        evt.txt = input("> ")
        evt.type = "command"
        return evt

    def raw(self, txt):
        "print text."
        print(txt)


def init(*pkgs):
    "scan modules for commands and classes"
    for pkg in pkgs:
        for modname in modnames(pkg):
            modi = getattr(pkg, modname)
            if "init" not in dir(modi):
                continue
            thr = launch(modi.init)
            yield modi, thr


def modnames(*args):
    "return module names."
    res = []
    for arg in args:
        res.extend([x for x in dir(arg) if not x.startswith("__")])
    return sorted(res)


def wrap(func, outer):
    "reset console."
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        outer("")
    except Exception as ex:
        later(ex)
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)


def main():
    "main"
    cfg.txt = " ".join(sys.argv[1:])
    parse(cfg)
    init(face, MODS)
    csl = Console()
    csl.start()
    forever()


if __name__ == "__main__":
    wrap(main, print)
    errors(print)
